# s3 bucket
S3Bucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: ${self:custom.${self:provider.stage}.s3Bucket}

S3BucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref S3Bucket
    PolicyDocument:
      Statement:
        - Sid: 'Grant a CloudFront Origin Identity access to support private content'
          Action:
            - 's3:GetObject'
          Effect: Allow
          Resource: !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3Bucket
              - '/*'
          Principal:
            AWS: 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E22AXWZT9RAHBI'

pythonBuildsBatchIamRole:
  Type: AWS::IAM::Role
  Properties:
    Path: /service-role/
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - batch.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
pythonBuildsSpotFleetIamRole:
  Type: AWS::IAM::Role
  Properties:
    Path: /service-role/
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - spotfleet.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
pythonBuildsInstanceIamRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service:
              - 'ec2.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
    Path: '/'
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

pythonBuildsIamInstanceProfile:
  Type: AWS::IAM::InstanceProfile
  Properties:
    Path: '/'
    Roles:
      - Ref: pythonBuildsInstanceIamRole
pythonBuildsEcsTaskIamRole:
  Type: AWS::IAM::Role
  Properties:
    Path: /service-role/
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    Policies:
      - PolicyName: 's3-python-builds-bucket'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource:
                - arn:aws:s3:::${self:custom.${self:provider.stage}.s3Bucket}
                - arn:aws:s3:::${self:custom.${self:provider.stage}.s3Bucket}/*

pythonBuildsEcsLaunchTemplate:
  Type: AWS::EC2::LaunchTemplate
  Properties:
    LaunchTemplateName: python-builds-${self:provider.stage}-batch-managed-ecs-larger-volume
    LaunchTemplateData:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 64

pythonBuildsBatchComputeEnvironment:
  Type: AWS::Batch::ComputeEnvironment
  DependsOn: pythonBuildsBatchIamRole
  Properties:
    Type: MANAGED
    ServiceRole:
      "Fn::GetAtt": [ pythonBuildsBatchIamRole, Arn ]
    ComputeResources:
      Ec2Configuration:
        - ImageType: ECS_AL2
      LaunchTemplate:
        LaunchTemplateId:
          Ref: pythonBuildsEcsLaunchTemplate
      SpotIamFleetRole:
        "Fn::GetAtt": [ pythonBuildsSpotFleetIamRole, Arn ]
      SecurityGroupIds: ${self:custom.securityGroupIds}
      Subnets: ${self:custom.subnets}
      Type: SPOT
      BidPercentage: 85
      InstanceRole:
        "Fn::GetAtt": [ pythonBuildsIamInstanceProfile, Arn ]
      InstanceTypes:
        - m6i.xlarge
        - m6i.2xlarge
        - m6i.4xlarge
        - m6i.8xlarge
        - m5.xlarge
        - m5.2xlarge
        - m5.4xlarge
        - m5.8xlarge
        - m5a.xlarge
        - m5a.2xlarge
        - m5a.4xlarge
        - m5a.8xlarge
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
        - m4.8xlarge
        - r5.xlarge
        - r5.2xlarge
        - r5.4xlarge
        - r5.8xlarge
        - r5a.xlarge
        - r5a.2xlarge
        - r5a.4xlarge
        - r5a.8xlarge
        - r4.xlarge
        - r4.2xlarge
        - r4.4xlarge
        - r4.8xlarge
        - c6i.xlarge
        - c6i.2xlarge
        - c6i.4xlarge
        - c6i.8xlarge
        - c5.xlarge
        - c5.2xlarge
        - c5.4xlarge
        - c5.8xlarge
        - c5a.xlarge
        - c5a.2xlarge
        - c5a.4xlarge
        - c5a.8xlarge
        - c4.xlarge
        - c4.2xlarge
        - c4.4xlarge
        - c4.8xlarge
      Ec2KeyPair: ${self:custom.ec2KeyPair}
      Tags: ${self:provider.stackTags}
      MinvCpus: 0
      DesiredvCpus: 0
      MaxvCpus: 256

pythonBuildsBatchJobQueue:
  Type: AWS::Batch::JobQueue
  Properties:
    ComputeEnvironmentOrder:
      - Order: 1
        ComputeEnvironment:
          Ref: pythonBuildsBatchComputeEnvironment
    State: ENABLED
    Priority: 1

pythonBuildsBatchJobDefinitionUbuntu1804:
  Type: AWS::Batch::JobDefinition
  Properties:
    Type: container
    ContainerProperties:
      Command:
        - ./build.sh
      Vcpus: 4
      Memory: 4096
      JobRoleArn:
        "Fn::GetAtt": [ pythonBuildsEcsTaskIamRole, Arn ]
      Image: "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/python-builds:ubuntu-1804"
    Timeout:
      AttemptDurationSeconds: 7200
pythonBuildsBatchJobDefinitionUbuntu2004:
  Type: AWS::Batch::JobDefinition
  Properties:
    Type: container
    ContainerProperties:
      Command:
        - ./build.sh
      Vcpus: 4
      Memory: 4096
      JobRoleArn:
        "Fn::GetAtt": [ pythonBuildsEcsTaskIamRole, Arn ]
      Image: "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/python-builds:ubuntu-2004"
    Timeout:
      AttemptDurationSeconds: 7200
pythonBuildsBatchJobDefinitionUbuntu2204:
  Type: AWS::Batch::JobDefinition
  Properties:
    Type: container
    ContainerProperties:
      Command:
        - ./build.sh
      Vcpus: 4
      Memory: 4096
      JobRoleArn:
        "Fn::GetAtt": [ pythonBuildsEcsTaskIamRole, Arn ]
      Image: "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/python-builds:ubuntu-2204"
    Timeout:
      AttemptDurationSeconds: 7200
pythonBuildsBatchJobDefinitionCentos7:
  Type: AWS::Batch::JobDefinition
  Properties:
    Type: container
    ContainerProperties:
      Command:
        - ./build.sh
      Vcpus: 4
      Memory: 4096
      JobRoleArn:
        "Fn::GetAtt": [ pythonBuildsEcsTaskIamRole, Arn ]
      Image: "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/python-builds:centos-7"
    Timeout:
      AttemptDurationSeconds: 7200
pythonBuildsBatchJobDefinitionCentos8:
  Type: AWS::Batch::JobDefinition
  Properties:
    Type: container
    ContainerProperties:
      Command:
        - ./build.sh
      Vcpus: 4
      Memory: 4096
      JobRoleArn:
        "Fn::GetAtt": [ pythonBuildsEcsTaskIamRole, Arn ]
      Image: "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/python-builds:centos-8"
    Timeout:
      AttemptDurationSeconds: 7200
pythonBuildsBatchJobDefinitionOpensuse42:
  Type: AWS::Batch::JobDefinition
  Properties:
    Type: container
    ContainerProperties:
      Command:
        - ./build.sh
      Vcpus: 4
      Memory: 4096
      JobRoleArn:
        "Fn::GetAtt": [ pythonBuildsEcsTaskIamRole, Arn ]
      Image: "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/python-builds:opensuse-42"
    Timeout:
      AttemptDurationSeconds: 7200
pythonBuildsBatchJobDefinitionOpensuse153:
  Type: AWS::Batch::JobDefinition
  Properties:
    Type: container
    ContainerProperties:
      Command:
        - ./build.sh
      Vcpus: 4
      Memory: 4096
      JobRoleArn:
        "Fn::GetAtt": [ pythonBuildsEcsTaskIamRole, Arn ]
      Image: "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/python-builds:opensuse-153"
    Timeout:
      AttemptDurationSeconds: 7200

# step function cloudwatch event trigger resources
pythonBuildsEventRuleIamRole:
  Type: AWS::IAM::Role
  Properties:
    Path: /service-role/
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: 'allow-step-function-execution'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                Ref: PythonBuildsStepFunction

pythonBuildsEventRule:
  Type: AWS::Events::Rule
  Properties:
    Description: Check for New python Versions
    ScheduleExpression: rate(1 hour)
    State: ${self:custom.${self:provider.stage}.eventRuleState}
    Targets:
      - Id: pythonbuilds
        Input: '{}'
        RoleArn:
          Fn::GetAtt: [ pythonBuildsEventRuleIamRole, Arn ]
        Arn:
          Ref: PythonBuildsStepFunction
